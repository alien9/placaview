# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PlacaViewDockWidget
                                 A QGIS plugin
 This plugin manages road signs
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-04-26
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Tiago Barufi
        email                : barufi@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtWebKitWidgets import QWebView
#from qgis.core import *
from qgis.PyQt.QtWidgets import *
#from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import QIcon


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'placa_view_dockwidget_base.ui'))


class PlacaViewDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()
    photoClick = pyqtSignal()
    localViewChange=pyqtSignal(str)

    def __init__(self, parent=None, viewer="mapillary", icon=None):
        """Constructor."""
        super(PlacaViewDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        if viewer=="mapillary":
            self.findChild(QRadioButton, "radio_mapillary").setChecked(True)
        else:        
            self.findChild(QRadioButton, "radio_gsw").setChecked(True)
        if icon:
            self.findChild(QPushButton, "mapillarytype").setIcon(QIcon(icon))
        self.findChild(QRadioButton, "radio_gsw").toggled.connect(self.changeRadio_gsw)
        self.findChild(QRadioButton, "radio_mapillary").toggled.connect(self.changeRadio_mapillary)
            
    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
        
    def web_click(self):
        self.photoClick.emit()

    def changeRadio_gsw(self, *args, **kwargs):
        if args[0]:
            self.localViewChange.emit("gsw")
    
    def changeRadio_mapillary(self, *args, **kwargs):
        if args[0]:
            self.localViewChange.emit("mapillary")